package com.service.servlet;

import com.service.Service.UserService.UserService;
import com.service.clazz.MainJsonService;
import com.util.tools.CheckTools;
import com.util.tools.FormParamValid;
import com.util.tools.ToolUtil;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by hzm on 2014/7/4.
 * update 2015/9/9
 * 返回格式修改
 */
@WebServlet(name = "NJsonDispatcher", urlPatterns = {"/Action/NJsonDispatcher.do"})
public class NJsonDispatcher extends HttpServlet {

    protected void doPost(HttpServletRequest request, HttpServletResponse response) {
        PrintWriter out = null;
        Throwable exception = null;
//        String errorCode = "未知错误";
        try {
            response.setHeader("content-type", "application/json;charset=utf-8");
            out = response.getWriter();
            Map<String, String[]> paramMap = new HashMap<String, String[]>(request.getParameterMap());
            String[] param_user_id = paramMap.get("user_id");
            if (null != param_user_id) {
                UserService userService = UserService.getInstance();
                String user_id = userService.getUidFromCookie(request);
                if (CheckTools.isNull(user_id)) {//需要user_id但是未登录
                    out.write(ToolUtil.getReturnResultForString(403, null));
                    out.flush();
                    return;
                }
                paramMap.put("user_id", new String[]{user_id});
            }

            String validMessage = FormParamValid.getInstance().valid2(paramMap);
            if (validMessage != null) {
                out.write(ToolUtil.getReturnResultForString(703, null));
                out.flush();
                return;
            }

            out.write(ToolUtil.getReturnResultForString(201, new MainJsonService().invoke(paramMap)));
            out.flush();
        } catch (NoSuchMethodException e) {
            exception = e.getCause();
//            errorCode = "请求serviceId不存在";
        } catch (UnsupportedEncodingException e) {
            exception = e.getCause();
//            errorCode = "不支持的编码格式";
        } catch (SQLException e) {
            exception = e.getCause();
//            errorCode = e.getMessage();
        } catch (IllegalAccessException e) {
            exception = e.getCause();
//            errorCode = "私有serviceId方法请求";
        } catch (InvocationTargetException e) {
            exception = e.getTargetException();
//            errorCode = "系统错误";
        } catch (NullPointerException e) {
            exception = e.getCause();
//            errorCode = "空指针错误";
        } catch (RuntimeException e) {
            exception = e.getCause();
//            errorCode = e.getMessage();
        } catch (IOException e) {
            exception = e.getCause();
//            errorCode = e.getMessage();
        } finally {
            if (exception != null) {
                exception.printStackTrace();//正式环境应该删除，或转至出错页
                if (out != null) {
                    out.write(ToolUtil.getReturnResultForString(302, null));
                    out.flush();
                }
            }
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) {
        doPost(request, response);
    }
}
