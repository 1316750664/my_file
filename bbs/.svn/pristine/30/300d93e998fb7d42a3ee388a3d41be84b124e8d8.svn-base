package com.service.servlet;

import com.service.Service.loginDetection.LoginDetection;
import com.service.clazz.MainJsonService;
import com.util.tools.FormParamValid;
import com.util.tools.ToolUtil;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by hzm on 2014/7/4.
 */
@WebServlet(name = "JsonDispatcher", urlPatterns = {"/Action/JsonDispatcher.do"})
public class JsonDispatcher extends HttpServlet {

    protected void doPost(HttpServletRequest request, HttpServletResponse response) {
        PrintWriter out = null;
        Throwable exception = null;
        String errorCode = "未知错误";
        try {
            response.setHeader("content-type", "application/json;charset=utf-8");
            out = response.getWriter();
            Map<String, String[]> paramMap = new HashMap<String, String[]>(request.getParameterMap());
            String validMessage = FormParamValid.getInstance().valid(paramMap);
            if (validMessage != null) {
                out.write(validMessage);
                out.flush();
                return;
            }
            String cookie_uuid = ToolUtil.getRequestCookie(request.getCookies(), "cookie_uuid");
            String[] param_user_id = paramMap.get("user_id");
            if (cookie_uuid == null || "".equals(cookie_uuid) || param_user_id == null) {//未登录或者无需验证

            } else {
                String user_id = LoginDetection.getInstance().getUserid(cookie_uuid);//用户id
                if (!param_user_id[0].equals(user_id)) {//非法访问
                    out.write("{\"error\":\"501\",\"msg\":\"非法访问\"}");
                    out.flush();
                    return;
                }
            }


//            Iterator<Map.Entry<String, String[]>> iterator = paramMap.entrySet().iterator();
//            while (iterator.hasNext()) {
//                Map.Entry<String, String[]> entry = iterator.next();
//                System.out.print("key::" + entry.getKey());
//                String[] values = entry.getValue();
//                if (values == null) {
//                    System.out.println("===value::" + null);
//                } else {
//                    System.out.print("===value::");
//                    for (String value : values) {
//                        System.out.print(value + "--");
//                    }
//                    System.out.println("===");
//                }
//            }
//            TaoDbPool.getInstance().getDataSource(1).getConnection();
            //System.out.println(new MainJsonService().invoke(paramMap));
            out.write(new MainJsonService().invoke(paramMap));
            out.flush();
//            System.out.println("out...:"+System.currentTimeMillis());
        } catch (NoSuchMethodException e) {
            exception = e.getCause();
            errorCode = "请求serviceId不存在";
        } catch (UnsupportedEncodingException e) {
            exception = e.getCause();
            errorCode = "不支持的编码格式";
        } catch (SQLException e) {
            exception = e.getCause();
            errorCode = e.getMessage();
        } catch (IllegalAccessException e) {
            exception = e.getCause();
            errorCode = "私有serviceId方法请求";
        } catch (InvocationTargetException e) {
            exception = e.getTargetException();
            errorCode = "系统错误";
        } catch (NullPointerException e) {
            exception = e.getCause();
            errorCode = "空指针错误";
        } catch (RuntimeException e) {
            exception = e.getCause();
            errorCode = e.getMessage();
        } catch (IOException e) {
            exception = e.getCause();
            errorCode = e.getMessage();
        } finally {
            if (exception != null) {
                exception.printStackTrace();//正式环境应该删除，或转至出错页
                if (out != null) {
                    out.write("{\"error\":\"601\",\"msg\":\"" + errorCode + "\"}");
                    out.flush();
                }
            }
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) {
        doPost(request, response);
    }
}
