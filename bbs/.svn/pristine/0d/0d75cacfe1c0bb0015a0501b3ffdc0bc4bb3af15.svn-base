package com.service.servlet.RegisterPackages;

import com.bean.TaskBean;
import com.bean.ValidCodeBean;
import com.service.fragService.FragService;
import com.util.tools.ValidCodeCookie;
import org.codehaus.jackson.JsonParser;
import org.codehaus.jackson.map.DeserializationConfig;
import org.codehaus.jackson.map.ObjectMapper;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by xiayongwei on 2014/9/22.
 */
@WebServlet(name = "RegisterCheckAction", urlPatterns = {"/Action/RegisterCheckAction.do"})
public class RegisterCheckAction extends HttpServlet {
    ///
    protected void doPost(HttpServletRequest request, HttpServletResponse response) {
        PrintWriter out = null;
        try {
            request.setCharacterEncoding("utf-8");
            response.setHeader("content-type", "text/html;charset=utf-8");
            out = response.getWriter();
            String strType = request.getParameter("type");
            if ("1".equals(strType)) {/// 用户名判断

                String usrName = request.getParameter("usrName");
                Map<String, String[]> paramMap = new HashMap<String, String[]>();
                paramMap.put("taskId", new String[]{"100"});
                paramMap.put("txt_zh", new String[]{usrName});
                paramMap.put("cmdType", new String[]{"Query"});

                String txt_zh = request.getParameter("usrName");
                int taskId = 102;
                int cmdType = 0;
                String[] params = {txt_zh};
                TaskBean taskBean = new TaskBean(taskId, cmdType, params);
                String json = FragService.getInstance().fragment(0, taskBean);
                if (json == null || "[]".equals(json)) {
                    out.print("202");
                    out.flush();
                    return;
                }
                ObjectMapper objectMapper = new ObjectMapper();
                objectMapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);
                objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
                objectMapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);
                objectMapper.configure(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, true);
                objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, true);
                objectMapper.configure(JsonParser.Feature.INTERN_FIELD_NAMES, true);
                objectMapper.configure(JsonParser.Feature.CANONICALIZE_FIELD_NAMES, true);
                objectMapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);
                List<Map> list = objectMapper.readValue(json, List.class);
                if (list == null || list.size() == 0) {
                    out.print("false");//没有注册
                } else if (list.get(0).get("login_name").equals(txt_zh)) {
                    out.print("true");//已经注册
                }

            } else if ("2".equals(strType)) {/// 验证码判断
                String code = request.getParameter("code");
                ValidCodeBean validCodeBean = ValidCodeCookie.getInstance().readCodeCookie(response, request.getCookies(), 1);
                if (code == null || "".equals((code = code.trim())) || validCodeBean == null || !code.equalsIgnoreCase(validCodeBean.getCode())) {
                    out.print("false");
                } else {
                    out.print("true");
                }
            }
            out.flush();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) {
        doPost(request, response);
    }
}
